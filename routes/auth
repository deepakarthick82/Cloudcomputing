
const express = require('express');
const router = express.Router();
const User = require('../models/User');

console.log('bbb');

const {registerValidation,loginValidation} = require('../validations/validation')

const bcryptjs = require('bcryptjs')
const jsonwebtoken = require('jsonwebtoken')


// get all user data
router.get('/', async (req, res) => {
    const all_msgs = await User.find();
    res.send(all_msgs);
    console.log('testb');
});


// post a registered user details
router.post('/register', async(req,res)=>{
console.log('reached here')
console.log(registerValidation(req.body))

// validation to check user input
   
   const {error} = registerValidation(req.body)
   if(error){

    res.status(400).send(error['details'][0]['message'])
    res.send(registerValidation(req.body))
   }

   //validation to check if user exists
   const userExists = await User.findOne({email:req.body.email})
    if(userExists){
        return res.status(400).send({message:'User already exists'})
    }

 // I created a hashed represenation of my password!
   const salt = await bcryptjs.genSalt(5)
  const hashedPassword = await bcryptjs.hash(req.body.password,salt)


   // code to insert data
   const user = new User ({
         username:req.body.username,
         email:req.body.email,
     //  password:req.body.password
         password:hashedPassword
   })
   
   try{
       const savedUser = await user.save()
       res.send(savedUser)
      }catch(err) {
            res.status(400).send({message:err})



      } 
})


router.post('/login', async(req,res)=>{
   try{ 
    const {error} = loginValidation(req.body)
    if(error){
 
       res.status(400).send(error['details'][0]['message'])
    //res.send(registerValidation(req.body))
    }

//validation 2 to check user exists
   const user = await User.findOne({email:req.body.email})
      if(!user){
        return res.status(400).send({message:'User does not exist'})
    } 


// validation 3  to check user password
   const passwordValidation = await bcryptjs.compare(req.body.password,user.password)
      if(!passwordValidation){
        return res.status(400).send({message:'Password is wrong'})
}

// Generate an auth-token
   const token = jsonwebtoken.sign({_id:user._id}, process.env.TOKEN_SECRET)
   res.header('auth-token',token).send({'auth-token':token})
}catch(error) {
    res.status(400).send({ message: error.message })

}

})

module.exports = router;